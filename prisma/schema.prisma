generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(uuid())
  created_at             DateTime     @default(now())
  updated_at             DateTime     @updatedAt
  profile_picture        String?
  lat                    Float?
  lng                    Float?
  in_tournament          Boolean      @default(false)
  crew_id                String?
  password               String
  email                  String       @unique
  tag                    String
  reset_token            String?
  reset_token_expiration DateTime?
  waiting_crew_id        String?
  is_checked_in          Boolean      @default(false)
  twitch_username        String?
  twitter_username       String?
  smashgg_slug           String?      @unique
  notification_token     String?      @unique
  allow_notifications    Boolean      @default(false)
  allow_searchability    Boolean      @default(true)
  smashgg_player_id      Int?         @unique
  smashgg_user_id        Int?         @unique
  crew                   Crew?        @relation("crew_members", fields: [crew_id], references: [id])
  waiting_crew           Crew?        @relation("crew_waiting_members", fields: [waiting_crew_id], references: [id])
  initiator_battle       Battle[]     @relation("battle_initiator")
  opponent_battle        Battle[]     @relation("battle_opponent")
  won_battles            Battle[]     @relation("battle_winner")
  crew_admin             Crew?        @relation("crew_admin")
  matches_initiated      Match[]      @relation("matches_initiated")
  matches_invited        Match[]      @relation("matches_invited")
  characters             Character[]
  roles                  Role[]
  favorited_tournaments  Tournament[] @relation("favorited_tournaments")
  tournaments            Tournament[] @relation("user_tournaments")
  tournaments_organizer  Tournament[] @relation("user_tournaments_organizer")
}

model Character {
  id                         String   @id @default(uuid())
  name                       String   @unique
  picture                    String
  initiator_character_battle Battle[] @relation("battle_initiator_character")
  opponent_character_battle  Battle[] @relation("battle_opponent_character")
  users                      User[]
}

model Tournament {
  id                           String    @id @default(uuid())
  name                         String
  lat                          Float?
  lng                          Float?
  city                         String?
  currency                     String
  images                       String[]
  slug                         String
  state                        Int
  tournament_id                Int       @unique
  is_started                   Boolean   @default(false)
  url                          String
  country_code                 String
  created_at                   DateTime?
  end_at                       DateTime?
  event_registration_closes_at DateTime?
  has_offline_events           Boolean?
  is_registration_open         Boolean?
  num_attendees                Int?
  start_at                     DateTime?
  venue_address                String?
  venue_name                   String?
  events                       Event[]
  matches                      Match[]   @relation("matches_tournament")
  favorited_by                 User[]    @relation("favorited_tournaments")
  participants                 User[]    @relation("user_tournaments")
  organizers                   User[]    @relation("user_tournaments_organizer")
}

model Event {
  id            String     @id @default(uuid())
  event_id      Int        @unique
  name          String
  tournament_id String
  num_attendees Int
  tier          String
  valid         Boolean
  tournament    Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
}

model Crew {
  id              String   @id @default(uuid())
  name            String   @unique
  prefix          String
  icon            String
  banner          String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  admin_id        String   @unique
  admin           User     @relation("crew_admin", fields: [admin_id], references: [id])
  members         User[]   @relation("crew_members")
  waiting_members User[]   @relation("crew_waiting_members")
}

model Role {
  id    String   @id @default(uuid())
  name  RoleEnum @unique
  users User[]
}

model Match {
  id             String      @id @default(uuid())
  total_matches  Int         @default(1)
  amount         Int?        @default(0)
  initiator_id   String?
  initiator_wins Int         @default(0)
  is_moneymatch  Boolean     @default(false)
  state          MatchState  @default(HOLD)
  tournament_id  String?
  created_at     DateTime    @default(now())
  opponent_id    String?
  opponent_wins  Int         @default(0)
  initiator      User?       @relation("matches_initiated", fields: [initiator_id], references: [id])
  opponent       User?       @relation("matches_invited", fields: [opponent_id], references: [id])
  tournament     Tournament? @relation("matches_tournament", fields: [tournament_id], references: [id])
  battles        Battle[]
}

model Battle {
  id                     String     @id @default(uuid())
  match_id               String
  initiator_id           String?
  initiator_character_id String?
  winner_id              String?
  opponent_character_id  String?
  opponent_id            String?
  initiator_character    Character? @relation("battle_initiator_character", fields: [initiator_character_id], references: [id])
  initiator              User?      @relation("battle_initiator", fields: [initiator_id], references: [id])
  match                  Match      @relation(fields: [match_id], references: [id])
  opponent_character     Character? @relation("battle_opponent_character", fields: [opponent_character_id], references: [id])
  opponent               User?      @relation("battle_opponent", fields: [opponent_id], references: [id])
  winner                 User?      @relation("battle_winner", fields: [winner_id], references: [id])
}

enum MatchState {
  HOLD
  STARTED
  CHARACTER_CHOICE
  REFUSED
  FINISHED
}

enum RoleEnum {
  ADMIN
  TOURNAMENT_ORGANIZER
  CREW_ADMIN
  USER
}
