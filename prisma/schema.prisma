generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String       @id @default(uuid())
  created_at               DateTime     @default(now())
  updated_at               DateTime     @updatedAt
  profile_picture          String?
  lat                      Float?
  lng                      Float?
  in_tournament            Boolean      @default(false)
  crew_id                  String?
  password                 String
  email                    String       @unique
  tag                      String
  reset_token              String?
  reset_token_expiration   DateTime?
  waiting_crew_id          String?
  is_checked_in            Boolean      @default(false)
  twitch_username          String?
  twitter_username         String?
  smashgg_slug             String?      @unique
  authorized_notifications Boolean      @default(false)
  notification_token       String?      @unique
  crew                     Crew?        @relation("crew_members", fields: [crew_id], references: [id])
  waiting_crew             Crew?        @relation("crew_waiting_members", fields: [waiting_crew_id], references: [id])
  matches_invited          Match[]      @relation("matches_invited")
  matches_initiated        Match[]      @relation("matches_initiated")
  characters               Character[]
  roles                    Role[]
  favorited_tournaments    Tournament[] @relation("favorited_tournaments")
  tournaments              Tournament[] @relation("user_tournaments")
  tournaments_organizer    Tournament[] @relation("user_tournaments_organizer")
}

model Character {
  id      String @id @default(uuid())
  name    String @unique
  picture String
  users   User[]
}

model Tournament {
  id                        String    @id @default(uuid())
  name                      String    @unique
  lat                       Float?
  lng                       Float?
  city                      String?
  countryCode               String
  createdAt                 DateTime?
  currency                  String
  numAttendees              Int?
  endAt                     DateTime?
  eventRegistrationClosesAt DateTime?
  hasOfflineEvents          Boolean?
  images                    String[]
  isRegistrationOpen        Boolean?
  slug                      String
  state                     Int
  venueName                 String?
  venueAddress              String?
  tournament_id             Int       @unique
  startAt                   DateTime?
  is_started                Boolean   @default(false)
  favorited_by              User[]    @relation("favorited_tournaments")
  participants              User[]    @relation("user_tournaments")
  organizers                User[]    @relation("user_tournaments_organizer")
}

model Crew {
  id              String @id @default(uuid())
  name            String @unique
  prefix          String
  icon            String
  banner          String
  members         User[] @relation("crew_members")
  waiting_members User[] @relation("crew_waiting_members")
}

model Role {
  id    String   @id @default(uuid())
  name  RoleEnum @unique
  users User[]
}

model Match {
  id             String     @id @default(uuid())
  total_matches  Int        @default(1)
  state          MatchState @default(HOLD)
  initiator_id   String
  intiator_wins  Int        @default(0)
  adversary_id   String
  adversary_wins Int        @default(0)
  is_moneymatch  Boolean    @default(false)
  amount         Int?       @default(0)
  adversary      User       @relation("matches_invited", fields: [adversary_id], references: [id])
  initiator      User       @relation("matches_initiated", fields: [initiator_id], references: [id])
}

enum MatchState {
  HOLD
  STARTED
  REFUSED
  FINISHED
}

enum RoleEnum {
  ADMIN
  TOURNAMENT_ORGANIZER
  CREW_ADMIN
  USER
}
