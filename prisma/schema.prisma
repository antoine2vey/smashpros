generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(uuid())
  created_at             DateTime     @default(now())
  updated_at             DateTime     @updatedAt
  profile_picture        String?
  lat                    Float?
  lng                    Float?
  in_tournament          Boolean      @default(false)
  prefix                 String?
  crew_id                String?
  password               String
  email                  String       @unique
  tag                    String
  reset_token            String?
  reset_token_expiration DateTime?
  waiting_crew_id        String?
  is_checked_in          Boolean      @default(false)
  crew                   Crew?        @relation("crew_members", fields: [crew_id], references: [id])
  waiting_crew           Crew?        @relation("crew_waiting_members", fields: [waiting_crew_id], references: [id])
  characters             Character[]
  roles                  Role[]
  favorited_tournaments  Tournament[] @relation("favorited_tournaments")
  tournaments            Tournament[] @relation("user_tournaments")
  tournaments_organizer  Tournament[] @relation("user_tournaments_organizer")
}

model Character {
  id      String @id @default(uuid())
  name    String @unique
  picture String
  users   User[]
}

model Tournament {
  id                        String    @id @default(uuid())
  name                      String    @unique
  lat                       Float?
  lng                       Float?
  city                      String?
  countryCode               String
  createdAt                 DateTime?
  currency                  String
  numAttendees              Int
  endAt                     DateTime?
  eventRegistrationClosesAt DateTime?
  hasOfflineEvents          Boolean?
  images                    Json[]
  isRegistrationOpen        Boolean?
  slug                      String
  state                     Int
  venueName                 String?
  venueAddress              String?
  tournament_id             Int       @unique
  startAt                   DateTime?
  is_started                Boolean   @default(false)
  favorited_by              User[]    @relation("favorited_tournaments")
  participants              User[]    @relation("user_tournaments")
  organizers                User[]    @relation("user_tournaments_organizer")
}

model Crew {
  id              String @id @default(uuid())
  name            String @unique
  prefix          String
  members         User[] @relation("crew_members")
  waiting_members User[] @relation("crew_waiting_members")
}

model Role {
  id    String   @id @default(uuid())
  name  RoleEnum
  users User[]
}

enum RoleEnum {
  ADMIN
  TOURNAMENT_ORGANIZER
  CREW_ADMIN
  USER
}
