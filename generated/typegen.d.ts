/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  TournamentQuery: { // input type
    id?: string | null; // ID
    player?: string | null; // String
  }
  UserRegisterPayload: { // input type
    characters?: string[] | null; // [ID!]
    email?: string | null; // String
    password?: string | null; // String
    profilePicture?: NexusGenScalars['Upload'] | null; // Upload
    tag?: string | null; // String
  }
  UserUpdatePayload: { // input type
    characters?: string[] | null; // [ID!]
    email?: string | null; // String
    id?: string | null; // String
    profilePicture?: NexusGenScalars['Upload'] | null; // Upload
    tag?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  JSON: any
  Upload: any
}

export interface NexusGenObjects {
  Character: { // root type
    id: string; // ID!
    name: string; // String!
    picture: string; // String!
  }
  Crew: { // root type
    id: string; // ID!
    name: string; // String!
    prefix: string; // String!
  }
  Mutation: {};
  Query: {};
  Tournament: { // root type
    city?: string | null; // String
    countryCode: string; // String!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    currency: string; // String!
    endAt?: NexusGenScalars['DateTime'] | null; // DateTime
    eventRegistrationClosesAt?: NexusGenScalars['DateTime'] | null; // DateTime
    hasOfflineEvents?: boolean | null; // Boolean
    id: string; // ID!
    isRegistrationOpen?: boolean | null; // Boolean
    lat?: number | null; // Float
    lng?: number | null; // Float
    name: string; // String!
    numAttendees: number; // Int!
    slug: string; // String!
    state: number; // Int!
    tournament_id: number; // Int!
    venueAddress?: string | null; // String
    venueName?: string | null; // String
  }
  User: { // root type
    id: string; // ID!
    profile_picture?: string | null; // String
    tag: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Character: { // field return type
    id: string; // ID!
    name: string; // String!
    picture: string; // String!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Crew: { // field return type
    id: string; // ID!
    members: NexusGenRootTypes['User'][]; // [User!]!
    name: string; // String!
    prefix: string; // String!
    waiting_members: NexusGenRootTypes['User'][]; // [User!]!
  }
  Mutation: { // field return type
    register: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    characters: Array<NexusGenRootTypes['Character'] | null> | null; // [Character]
    tournaments: Array<NexusGenRootTypes['Tournament'] | null> | null; // [Tournament]
  }
  Tournament: { // field return type
    city: string | null; // String
    countryCode: string; // String!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    currency: string; // String!
    endAt: NexusGenScalars['DateTime'] | null; // DateTime
    eventRegistrationClosesAt: NexusGenScalars['DateTime'] | null; // DateTime
    favorited_by: NexusGenRootTypes['User'][]; // [User!]!
    hasOfflineEvents: boolean | null; // Boolean
    id: string; // ID!
    isRegistrationOpen: boolean | null; // Boolean
    lat: number | null; // Float
    lng: number | null; // Float
    name: string; // String!
    numAttendees: number; // Int!
    participants: NexusGenRootTypes['User'][]; // [User!]!
    slug: string; // String!
    state: number; // Int!
    tournament_id: number; // Int!
    venueAddress: string | null; // String
    venueName: string | null; // String
  }
  User: { // field return type
    characters: NexusGenRootTypes['Character'][]; // [Character!]!
    id: string; // ID!
    profile_picture: string | null; // String
    tag: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Character: { // field return type name
    id: 'ID'
    name: 'String'
    picture: 'String'
    users: 'User'
  }
  Crew: { // field return type name
    id: 'ID'
    members: 'User'
    name: 'String'
    prefix: 'String'
    waiting_members: 'User'
  }
  Mutation: { // field return type name
    register: 'User'
  }
  Query: { // field return type name
    characters: 'Character'
    tournaments: 'Tournament'
  }
  Tournament: { // field return type name
    city: 'String'
    countryCode: 'String'
    createdAt: 'DateTime'
    currency: 'String'
    endAt: 'DateTime'
    eventRegistrationClosesAt: 'DateTime'
    favorited_by: 'User'
    hasOfflineEvents: 'Boolean'
    id: 'ID'
    isRegistrationOpen: 'Boolean'
    lat: 'Float'
    lng: 'Float'
    name: 'String'
    numAttendees: 'Int'
    participants: 'User'
    slug: 'String'
    state: 'Int'
    tournament_id: 'Int'
    venueAddress: 'String'
    venueName: 'String'
  }
  User: { // field return type name
    characters: 'Character'
    id: 'ID'
    profile_picture: 'String'
    tag: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    register: { // args
      payload?: NexusGenInputs['UserRegisterPayload'] | null; // UserRegisterPayload
    }
  }
  Tournament: {
    participants: { // args
      query?: NexusGenInputs['TournamentQuery'] | null; // TournamentQuery
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}