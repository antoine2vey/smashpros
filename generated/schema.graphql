### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
}

type Battle {
  adversary: User!
  adversary_character: Character!
  id: ID!
  initiator: User!
  initiator_character: Character!
  winner: User
}

type Character {
  id: ID!
  name: String!
  picture: String!
  users: [User!]!
}

type Crew {
  banner: String!
  icon: String!
  id: ID!
  members: [User!]!
  name: String!
  prefix: String!
  waiting_members: [User!]!
}

input CrewCreationPayload {
  banner: Upload!
  icon: Upload!
  name: String!
  prefix: String!
}

enum CrewUpdateActionEnum {
  ACCEPT
  DENY
}

"""Date custom scalar type"""
scalar DateTime

type Event {
  event_id: Int!
  id: ID!
  name: String!
  num_attendees: Int!
  tier: String!
  tournament: Tournament!
  valid: Boolean!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Match {
  adversary: User!
  adversary_wins: Int!
  amount: Int
  battles: [Battle!]!
  id: ID!
  initiator: User!
  intiator_wins: Int!
  is_moneymatch: Boolean!
  state: MatchState!
  total_matches: Int!
}

enum MatchState {
  FINISHED
  HOLD
  REFUSED
  STARTED
}

type Mutation {
  askPasswordReset(email: String!): String
  checkUserIn(participant: ID!, tournament: ID!): Boolean
  createCrew(payload: CrewCreationPayload!): Crew
  favoriteTournament(id: ID!, unfavorite: Boolean = false): Boolean
  joinCrew(id: ID!): Crew
  kickMember(id: ID!): Crew
  login(email: String!, password: String!): AuthPayload
  participateTournament(id: ID!, unparticipate: Boolean): Tournament
  passwordReset(code: String!, confirmPassword: String!, password: String!): Boolean
  register(payload: UserRegisterPayload!): User
  sendMatchInvite(amount: Int, isMoneymatch: Boolean, to: ID!, totalMatches: Int!): Match
  synchronizeTournaments: [Tournament]
  updateMatchScore(adversaryCharacter: ID!, id: ID!, initiatorCharacter: ID!): Match
  updateMatchState(id: ID!, state: MatchState!): Match
  updateMember(action: CrewUpdateActionEnum!, id: ID!): Crew
  updateProfile(payload: UserUpdatePayload!): User
  userEnteredTournament(tournament: ID!): User
  userLeftTournament(tournament: ID!): User
}

type Query {
  battles: [Battle!]
  characters: [Character]
  crew: Crew
  crews: [Crew]
  events: [Event!]
  matches: [Match!]
  suggestedName(slug: String!): SuggestedName
  tournament(id: ID!): Tournament
  tournaments: [Tournament!]
  usersByCharacter(id: ID!): [User!]
}

input RegisterPayload {
  success: Boolean
}

type Role {
  id: ID!
  name: RoleEnum!
}

enum RoleEnum {
  ADMIN
  CREW_ADMIN
  TOURNAMENT_ORGANIZER
  USER
}

type Subscription {
  userEnteredTournament: User!
  userLeftTournament: User!
}

type SuggestedName {
  smashGGPlayerId: Int!
  smashGGUserId: Int!
  tag: String!
}

type Tournament {
  city: String
  country_code: String!
  created_at: DateTime
  currency: String!
  end_at: DateTime
  event_registration_closes_at: DateTime
  events: [Event!]!
  favorited_by: [User!]!
  has_offline_events: Boolean
  id: ID!
  images: [String!]!
  is_registration_open: Boolean
  lat: Float
  lng: Float
  name: String!
  num_attendees: Int
  participants(characters: [ID!]): [User!]!
  slug: String!
  state: Int!
  tournament_id: Int!
  venue_address: String
  venue_name: String
}

input TournamentQuery {
  id: ID
  player: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  characters: [Character!]!
  crew: Crew
  email: String!
  id: ID!
  in_tournament: Boolean!
  profile_picture: String
  roles: [Role!]!
  tag: String!
  tournaments: [Tournament!]!
  tournaments_organizer: [Tournament!]!
  waiting_crew: Crew
}

input UserRegisterPayload {
  characters: [ID!]!
  email: String!
  password: String!
  profilePicture: Upload!
  smashGGPlayerId: Int
  smashGGSlug: String
  smashGGUserId: Int
  tag: String!
  twitchUsername: String
  twitterUsername: String
}

input UserUpdatePayload {
  characters: [ID!]!
  email: String!
  password: String!
  profilePicture: Upload
  smashGGPlayerId: Int
  smashGGSlug: String
  smashGGUserId: Int
  tag: String!
  twitchUsername: String
  twitterUsername: String
}
